import {
  GoogleGenAI,
  HarmBlockThreshold,
  HarmCategory,
} from '@google/genai'

let aiInstance: GoogleGenAI | null = null

function getAIInstance(): GoogleGenAI {
  if (!aiInstance) {
    const apiKey = process.env.GEMINI_API_KEY
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY is not configured')
    }
    aiInstance = new GoogleGenAI({
      apiKey
    })
  }
  return aiInstance
}

const AI_CONFIG = {
  safetySettings: [
    {
      category: HarmCategory.HARM_CATEGORY_HARASSMENT,
      threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
    },
    {
      category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
      threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    },
    {
      category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
      threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    },
    {
      category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
      threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,
    },
  ],
  responseMimeType: 'text/plain',
}

export async function generateAnswer(questionTitle: string, questionDescription: string): Promise<string> {
  try {
    const ai = getAIInstance()
    const model = 'gemini-2.5-flash'
    
    const prompt = `You are an AI assistant helping users on a Q&A platform similar to Stack Overflow. 
Please provide a helpful, accurate, and well-structured answer to the following question.

Question Title: ${questionTitle}

Question Description: ${questionDescription}

Please provide a comprehensive answer that:
1. Directly addresses the question
2. Includes relevant examples or code snippets if applicable
3. Is well-formatted and easy to understand
4. Provides practical solutions or explanations
5. Is professional and helpful in tone

Answer:`

    const contents = [
      {
        role: 'user',
        parts: [
          {
            text: prompt,
          },
        ],
      },
    ]

    const response = await ai.models.generateContent({
      model,
      config: AI_CONFIG,
      contents,
    })

    const generatedText = response.text?.trim()
    
    if (!generatedText) {
      throw new Error('No response generated from AI')
    }

    // Add a disclaimer that this is AI-generated
    const aiAnswer = `${generatedText}

---
*This answer was generated by AI Assistant. Please verify the information and consider it as a starting point for your research.*`

    return aiAnswer
    
  } catch (error) {
    console.error('Error generating AI answer:', error)
    
    // Fallback response
    return `I apologize, but I'm currently unable to generate a detailed answer for this question. This might be due to:

1. **Technical limitations** - The question might require specific expertise
2. **Service availability** - AI services might be temporarily unavailable
3. **Content safety** - The question might involve sensitive topics

**Suggested next steps:**
- Try rephrasing your question with more specific details
- Search for similar questions in the community
- Consider breaking down complex questions into smaller parts
- Wait for community members to provide answers

---
*This is an automated response from AI Assistant. Please wait for community members to provide more specific help.*`
  }
}

export async function shouldGenerateAIAnswer(questionTitle: string, questionDescription: string): Promise<boolean> {
  // Simple heuristics to decide if we should generate an AI answer
  const combinedText = `${questionTitle} ${questionDescription}`.toLowerCase()
  
  // Skip very short questions
  if (combinedText.length < 20) {
    return false
  }
  
  // Skip questions that seem like homework without effort
  const homeworkKeywords = ['homework', 'assignment', 'due tomorrow', 'exam', 'test']
  const hasHomeworkKeywords = homeworkKeywords.some(keyword => combinedText.includes(keyword))
  
  if (hasHomeworkKeywords && combinedText.length < 100) {
    return false
  }
  
  // Skip very basic "hello world" type questions without context
  const basicKeywords = ['hello world', 'how to start', 'what is programming']
  const isVeryBasic = basicKeywords.some(keyword => combinedText.includes(keyword)) && combinedText.length < 50
  
  if (isVeryBasic) {
    return false
  }
  
  return true
} 